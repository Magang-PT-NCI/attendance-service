// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attendance {
  id            Int                      @id @default(autoincrement())
  nik           String                   @db.VarChar(20)
  check_in_id   Int?
  check_out_id  Int?
  permit_id     Int?
  overtime_id   Int?
  date          DateTime                 @db.Date
  status        AttendanceStatus
  checkIn       Check?                   @relation("CheckIn", fields: [check_in_id], references: [id])
  checkOut      Check?                   @relation("CheckOut", fields: [check_out_id], references: [id])
  permit        Permit?                  @relation("Permit", fields: [permit_id], references: [id])
  overtime      Overtime?                @relation("Overtime", fields: [overtime_id], references: [id])
  employee      EmployeeCache            @relation("Employee", fields: [nik], references: [nik])
  activities    Activity[]
  confirmations AttendanceConfirmation[]
}

model EmployeeCache {
  nik         String       @id @db.VarChar(20)
  name        String       @db.VarChar(50)
  area        String       @db.VarChar(50)
  attendances Attendance[] @relation("Employee")
  permits     Permit[]     @relation("EmployeePermit")
}

model Check {
  id                 Int          @id @default(autoincrement())
  type               CheckType
  time               DateTime     @db.Time
  location           String?      @db.VarChar(50)
  photo              String?      @db.VarChar(255)
  checkInAttendance  Attendance[] @relation("CheckIn")
  checkOutAttendance Attendance[] @relation("CheckOut")
}

model Activity {
  id            Int            @id @default(autoincrement())
  attendance_id Int
  description   String         @db.Text
  status        ActivityStatus
  start_time    DateTime       @db.Time
  end_time      DateTime       @db.Time
  attendance    Attendance     @relation(fields: [attendance_id], references: [id])
}

model Permit {
  id                Int           @id @default(autoincrement())
  nik               String        @db.VarChar(20)
  reason            Reason
  start_date        DateTime      @db.Date
  duration          Int
  permission_letter String        @db.VarChar(255)
  checked           Boolean       @default(false)
  approved          Boolean       @default(false)
  attendances       Attendance[]  @relation("Permit")
  employee          EmployeeCache @relation("EmployeePermit", fields: [nik], references: [nik])
  created_at        DateTime      @default(now())
}

model Overtime {
  id          Int          @id @default(autoincrement())
  checked     Boolean      @default(false)
  approved    Boolean      @default(false)
  created_at  DateTime     @default(now())
  attendances Attendance[] @relation("Overtime")
}

model AttendanceConfirmation {
  id            Int              @id @default(autoincrement())
  attendance_id Int
  type          ConfirmationType
  description   String           @db.Text
  attachment    String           @db.VarChar(255)
  checked       Boolean          @default(false)
  approved      Boolean          @default(false)
  created_at    DateTime         @default(now())
  reason        Reason?
  attendance    Attendance       @relation(fields: [attendance_id], references: [id])
}

enum AttendanceStatus {
  presence
  permit
  absent
}

enum CheckType {
  in
  out
}

enum ActivityStatus {
  done
  progress
}

enum Reason {
  sakit
  urusan_mendadak
  cuti
  duka
  melahirkan
  lainnya
}

enum ConfirmationType {
  check_in
  check_out
  permit
}
